// question no 1
// multiplication of two-dimensional array or matrix
#include <stdio.h>

int main() {
    int rows1, cols1, rows2, cols2, i, j, k;
    printf("Enter 2-dimensional array size: ");
    scanf("%d %d", &rows1, &cols1);
    rows2 = cols1; // number of rows in second array equals number of columns in first array
    cols2 = 2; // number of columns in second array
    printf("Enter numbers for each element in two arrays:\n");
    int arr1[rows1][cols1], arr2[rows2][cols2], result[rows1][cols2];
    for (i = 0; i < rows1; i++) {
        for (j = 0; j < cols1; j++) {
            scanf("%d", &arr1[i][j]);
        }
    }
    for (i = 0; i < rows2; i++) {
        for (j = 0; j < cols2; j++) {
            scanf("%d", &arr2[i][j]);
        }
    }
    // multiply two arrays element-wise
    for (i = 0; i < rows1; i++) {
        for (j = 0; j < cols2; j++) {
            int sum = 0;
            for (k = 0; k < cols1; k++) {
                sum += arr1[i][k] * arr2[k][j];
            }
            result[i][j] = sum;
        }
    }
    // print the resulting array
    printf("Result after multiplication of two arrays:\n");
    for (i = 0; i < rows1; i++) {
        for (j = 0; j < cols2; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }
    return 0;
}


// question no.2
//Swap Two Numbers Using Pointers In C
#include<stdio.h>
int main()
{
    int a,b,*x,*y,temp;
    printf("Enter value a&b : ");
    scanf("%d%d",&a, &b);

    x = &a;
    y = &b;
    temp = *x;
    *x = *y;
    *y = temp;
    printf("After swapping by pointer, a=%d,b=%d\n",a, b);

    return 0;
}

// question no 3
#include <stdio.h>
int main() {
  char str[100];
  int ch;
  printf("Enter any string: ");
  // Use fgets instead of gets
  fgets(str, 100, stdin);
  printf("Result: ");
  // Use puts instead of printf
  puts(str);
  
  // Alternatively, use getchar and putchar
  printf("Enter any string: ");
  while ((ch = getchar()) != '\n' && ch != EOF) {
    putchar(ch);
  }
  putchar('\n');
  
 return(0);
}

// question no 4.
#include <stdio.h>

// function to calculate factorial recursively
int fact_of_num(int n)
{
    if (n == 0)
        return 1;
    else
        return n * fact_of_num(n-1);
}

int main()
{
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);

    // calculate the factorial of the number using recursion
    int fact = fact_of_num(num);

    printf("Factorial = %d", fact);

    return 0;
}

// question no 5
#include <stdio.h>
#include <string.h>
int main() {
    char input[100];
    int start, end;
    printf("Enter a string: ");
    scanf("%s", input);
    // Initialize start and end pointers
    start = 0;
    end = strlen(input) - 1;
    // Compare first and last characters until they meet or mismatch
    while (start < end) {
        if (input[start] != input[end]) {
            break;
        }
        start++;
        end--;
    }
    // Check if start and end pointers crossed each other
    if (start >= end) {
        printf(" yes, it is a palindrome\n");
    }
    else {
        printf(" not a palindrome string\n");
    }
    return(0);
}

// question no 6
#include <stdio.h>
#include <stdbool.h>
// A function to check if an element is present in an array
bool is_present(int arr[], int size, int element) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == element) {
            return true;
        }
    }
    return false;
}
// A function to merge two arrays without duplicates
void merge_without_duplicates(int arr1[], int size1, int arr2[], int size2) {
    // Create a new array to store the result
    int result[size1 + size2];
    // Initialize a variable to keep track of the result index
    int index = 0;
    // Loop through the first array and copy its elements to the result
    for (int i = 0; i < size1; i++) {
        result[index] = arr1[i];
        index++;
    }
    // Loop through the second array and copy its elements to the result only if they are not present in the first array
    for (int j = 0; j < size2; j++) {
        if (!is_present(arr1, size1, arr2[j])) {
            result[index] = arr2[j];
            index++;
        }
    }
    // Print the result array
    printf("Result of merging: ");
    for (int k = 0; k < index; k++) {
        printf("%d ", result[k]);
    }
}
// A main function to test the above functions
int main() {
    // Declare and initialize two arrays
    int arr1[] = {3, 5, 7};
    int arr2[] = {2, 5, 9};
    // Get their sizes using sizeof operator
    int size1 = sizeof(arr1) / sizeof(arr1[0]);
    int size2 = sizeof(arr2) / sizeof(arr2[0]);
    
   // Call the merge_without_duplicates function with these arrays as arguments 
   merge_without_duplicates(arr1, size1, arr2, size2);
   
   return(0);
}

// question no 7
#include <stdio.h>

// Function for binomial coefficient table
void bin_table(int val) {
    int coeff = 1;
    for (int i = 0; i <= val; i++) {
        for (int j = 0; j <= i; j++) {
            if (j == 0 || i == 0)
                coeff = 1;
            else
                coeff = coeff * (i - j + 1) / j;
            printf("%-4d", coeff);
        }
        printf("\n");
    }
}

int main() {
    int value;
    printf("Enter the order of binomial power expression: ");
    scanf("%d", &value);
    printf("Results of printing on monitor:\n");
    bin_table(value);
    return 0;
}

// question no. 8
#include <stdio.h>

// A function to remove duplicate elements from an unsorted array
void remove_duplicates(int arr[], int *size) {

    int index = 0;
    for (int i = 0; i < *size; i++) {
        // Initialize a flag variable to indicate if the current element is a duplicate or not
        int flag = 0;
        // Loop through each element from 0 to index - 1
        for (int j = 0; j < index; j++) {
            // If the current element is equal to any of the previous unique elements
            if (arr[i] == arr[j]) {
                // Set the flag to 1 and break the loop
                flag = 1;
                break;
            }
        }
        // If the flag is still 0, meaning the current element is not a duplicate
        if (flag == 0) {
            // Copy the current element to the index position of unique elements array
            arr[index] = arr[i];
            index++;
        }
    }
    // Update the size of array by setting it equal to index 
    *size = index;
}

// A function to print an array 
void print_array(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
}

// A main function to test the above functions 
int main() {
   int size;
 
   printf("Enter size of array: ");
   scanf("%d", &size);

   int arr[size];
   
   printf("Enter numbers for each element: ");
   for (int i = 0; i < size; i++) {
       scanf("%d", &arr[i]);
   }
   
   printf("Results after removing duplicates: ");
   remove_duplicates(arr, &size);
   print_array(arr, size);

   return 0;
}

// question no.9
#include <stdio.h>

// A function to remove duplicate elements from an unsorted array
int remove_duplicates(int arr[], int size) {
    int index = 0;
    for (int i = 0; i < size; i++) {
        int flag = 0;
        for (int j = 0; j < index; j++) {
            if (arr[i] == arr[j]) {
                flag = 1;
                break;
            }
        }
        if (flag == 0) {
            arr[index] = arr[i];
            index++;
        }
    }
    return index;
}

// A function to sort an array using bubble sort
void bubble_sort(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// A function to find the kth smallest element in an array
int kth_smallest_element(int arr[], int size, int k) {
    // Sort the array using bubble sort
    bubble_sort(arr, size);
    
    // Remove duplicates from the sorted array and get the new size
    int new_size = remove_duplicates(arr, size);
    
    // If k is greater than the size of array after removing duplicates, return -1
    if (k > new_size) {
        return -1;
    }
    
    // Return the kth smallest element
    return arr[k-1];
}

int main() {
    int size, k;
    
    printf("Enter size of the array: ");
    scanf("%d", &size);
    
    int arr[size];
    
    printf("Enter numbers for each element: ");
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }
    
    printf("Enter desired kth smallest element: ");
    scanf("%d", &k);
    
    int result = kth_smallest_element(arr, size, k);
    
    if (result == -1) {
        printf("Invalid value of k");
    } else {
        printf("Result of %dth smallest element: %d", k, result);
    }
    
    return 0;
}

// question no 10
#include <stdio.h>

int main() {
    int n, i;
    float mean, variance, std_dev, sum = 0.0;
    printf("Enter size of the array: ");
    scanf("%d", &n);
    float arr[n];
    printf("Enter numbers for each element: ");
    for(i = 0; i < n; i++) {
        scanf("%f", &arr[i]);
        sum += arr[i];
    }
    mean = sum / n;
    sum = 0.0;
    for(i = 0; i < n; i++) {
        sum += (arr[i] - mean) * (arr[i] - mean);
    }
    variance = sum / n;
    // calculate standard deviation using repeated multiplication
    std_dev = 1;
    for(i = 0; i < 10; i++) {
        std_dev = 0.5 * (std_dev + variance / std_dev);
    }
    printf("Result of Standard Deviation: %f", std_dev);
    return 0;
}


